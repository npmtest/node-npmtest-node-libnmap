{"/home/travis/build/npmtest/node-npmtest-node-libnmap/test.js":"/* istanbul instrument in package npmtest_node_libnmap */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireExampleJsFromReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-node-libnmap/lib.npmtest_node_libnmap.js":"/* istanbul instrument in package npmtest_node_libnmap */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_node_libnmap = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_node_libnmap = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-node-libnmap/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-node-libnmap && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_node_libnmap */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_node_libnmap\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_node_libnmap.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_node_libnmap.rollup.js'] =\n            local.assetsDict['/assets.npmtest_node_libnmap.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_node_libnmap.__dirname + '/lib.npmtest_node_libnmap.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-node-libnmap/node_modules/node-libnmap/index.js":"/*!\n * node-libnmap\n * Copyright(c) 2013-2015 Jason Gerfen <jason.gerfen@gmail.com>\n * License: MIT\n */\n\nmodule.exports = require('./lib/node-libnmap.js');\n","/home/travis/build/npmtest/node-npmtest-node-libnmap/node_modules/node-libnmap/lib/node-libnmap.js":"/*!\n * node-libnmap\n * Copyright(c) 2013-2015 Jason Gerfen <jason.gerfen@gmail.com>\n * License: MIT\n */\n\nvar version = 'v0.2.15'\n  , fs = require('fs')\n  , os = require('os')\n  , async = require('async')\n  , hasbin = require('hasbin')\n  , xml2js = require('xml2js')\n  , ip = require('ip-address')\n  , merge = require('deepmerge')\n  , caller = require('caller-id')\n  , v6 = require('ip-address').v6\n  , netmask = require('netmask').Netmask\n  , proc = require('child_process').exec\n  , nmap = function(options, fn) {\n\n  /**\n   * @object defaults\n   * @abstract Default set of options\n   *\n   * @param {String} nmap - Path to NMAP binary\n   * @param {Boolean} verbose - Turn on verbosity during scan(s)\n   * @param {String} ports - Range of ports to scan\n   * @param {Array} range - An array of hostnames/ipv4/ipv6, CIDR or ranges\n   * @param {Number} timeout - Number of seconds to wait for host/port response\n   * @param {Number} blocksize - Number of hosts per network scanning block\n   * @param {Number} threshold - Max number of  spawned process\n   * @param {Array} flags - Array of flags for .spawn()\n   * @param {Boolean} udp - Perform a scan using the UDP protocol\n   * @param {Boolean} json - JSON object as output, false produces XML\n   */\n  var defaults = {\n    nmap:       'nmap',\n    verbose:    false,\n    ports:      '1-1024',\n    range: [],\n    timeout:    120,\n    blocksize:  16,\n    threshold:  os.cpus().length * 4,\n    flags: [\n      '-oX -',  // XML Output\n      '-T4',    // Scan optimization\n    ],\n    udp:        false,\n    json:       true\n  };\n\n  /**\n   * @method config\n   * @scope private\n   * @abstract Configuration object\n   */\n  var config = config || {\n\n    /**\n     * @function init\n     * @scope private\n     * @abstract Merges supplied options & builds functions\n     *\n     * @param {Object} defaults libnmap default options\n     * @param {Object} opts User supplied configuration object\n     * @param {Function} cb Callback\n     *\n     * @returns {Object}\n     */\n    init: function(defaults, opts, cb) {\n      var funcs = []\n        , called = caller.getData().functionName;\n\n      opts = tools.merge(defaults, opts);\n\n      validation.init(opts, function(err, result) {\n        if (err)\n          return cb(err);\n\n        if (/discover/.test(called)) {\n          if (!(opts.range = tools.adapters(opts)))\n            return cb(new Error(validation.verErr));\n\n          opts.ports = '';\n          opts.flags = [\n            '-oX -',\n            '-sn',\n            '--disable-arp-ping'\n          ];\n        }\n\n        opts.range = network.calculate(opts);\n        funcs = tools.funcs(opts);\n\n        return cb(null, {\n          opts: opts,\n          funcs: funcs\n        });\n      });\n    }\n  };\n\n  /**\n   * @method reporting\n   * @scope private\n   * @abstract Reporting object\n   */\n  var reporting = reporting || {\n\n    /**\n     * @function reports\n     * @scope private\n     * @abstract Handle results\n     *\n     * @param {Obect} opts Application defaults\n     * @param {Function} cb Return function\n     *\n     * @returns {Function}\n     */\n    reports: function(opts, report, cb) {\n      if ((!/object/.test(typeof report)) || (report.hasOwnProperty('code')))\n        return cb(new Error(report));\n\n      var xml = report.join('');\n\n      if (!opts.json)\n        return cb(null, xml);\n\n      try {\n        xml2js.parseString(xml, function parseXML(err, json) {\n          if(err)\n            return cb(new Error(err));\n\n          cb(null, json.nmaprun);\n        });\n      } catch(err) {\n        return cb(new Error(err));\n      }\n    }\n  };\n\n  /**\n   * @method tools\n   * @scope private\n   * @abstract Tools object\n   */\n  var tools = tools || {\n\n    /**\n     * @function merge\n     * @scope private\n     * @abstract Perform preliminary option/default object merge\n     *\n     * @param {Object} defaults Application defaults\n     * @param {Object} obj User supplied object\n     *\n     * @returns {Object}\n     */\n    merge: function(defaults, obj) {\n      defaults = defaults || {};\n      return merge(defaults, obj);\n    },\n\n    /**\n     * @function adapters\n     * @scope private\n     * @abstract Obtain network adapter information and return an array of\n     *           ranges as an array for CIDR calculations\n     *\n     * @param {Object} obj User supplied object\n     *\n     * @returns {Array}\n     */\n    adapters: function(obj) {\n      var ret = []\n        , adapters = os.networkInterfaces();\n\n      for (var iface in adapters) {\n        if (!adapters[iface][0].internal) {\n          if (!adapters[iface][0].netmask)\n            return false;\n\n          ret.push(adapters[iface][0].address+'/'+adapters[iface][0].netmask);\n        }\n      }\n\n      return ret;\n    },\n\n    /**\n     * @function funcs\n     * @scope private\n     * @abstract Create functions for use as callbacks\n     *\n     * @param {Obect} opts Application defaults\n     *\n     * @returns {Array}\n     */\n    funcs: function(opts) {\n      var funcs = {}\n        , cmd = false\n        , errors = []\n        , reports = [];\n\n      if (opts.range > 0)\n        return new Error(\"Range of hosts could not be created\");\n\n      Object.keys(opts.range).forEach(function blocks(block) {\n\n        var range = opts.range[block];\n\n        funcs[range] = function block(callback) {\n          cmd = tools.command(opts, range);\n\n          if (opts.verbose)\n            console.log('Running: '+cmd);\n\n          var report = []\n            , execute = proc(cmd, function exe(err, stdout, stderr) {\n              if (err)\n                return reporting.reports(opts, err, callback);\n            });\n\n          execute.stderr.on('data', function errbytes(chunk) {\n            /* Silently discard stderr messages to not interupt scans */\n          });\n\n          execute.stdout.on('data', function bytes(chunk) {\n            report.push(chunk);\n          });\n\n          execute.stdout.on('end', function bytesend() {\n            if (report.length > 0)\n              return reporting.reports(opts, report, callback);\n          });\n        };\n      });\n\n      return funcs;\n    },\n\n    /**\n     * @function command\n     * @abstract Generate nmap command string\n     *\n     * @param {Object} opts - User supplied options\n     * @param {String} block - Network block\n     *\n     * @returns {String} NMAP scan string\n     */\n    command: function(opts, block) {\n      var flags = opts.flags.join(' ')\n        , ip = new v6.Address(block)\n        , ipv6 = (ip.isValid()) ? ' -6 ' : ' '\n        , proto = (opts.udp) ? ' -sU' : ' '\n        , to = '--host-timeout='+opts.timeout+'s ';\n\n      return (opts.ports) ?\n        opts.nmap+proto+' '+to+flags+ipv6+'-p'+opts.ports+' '+block :\n        opts.nmap+proto+' '+to+flags+ipv6+block;\n    },\n\n    /**\n     * @function worker\n     * @scope private\n     * @abstract Executes object of functions\n     *\n     * @param {Object} obj User supplied object\n     * @param {Function} fn Return function\n     */\n    worker: function(obj, fn) {\n      async.parallelLimit(obj.funcs, obj.threshold, fn);\n    }\n  };\n\n  /**\n   * @method network\n   * @scope private\n   * @abstract Network object\n   */\n  var network = network || {\n\n    /**\n     * @function range\n     * @abstract Calculates all possible hosts per CIDR\n     *\n     * @param {Object} opts Application defaults\n     * @param {Object} cidr - netmask module object\n     *\n     * @returns {Array}\n     */\n    range: function(opts, cidr) {\n      var split = cidr.size / opts.blocksize\n        , results = [];\n\n      split = (split > 256) ? Math.round(split / 255) : split;\n\n      cidr.forEach(function(ip, long, index) {\n        if (index % split === 0) {\n          var obj = ip.split('.')\n            , start = parseInt(obj[3])\n            , end = (parseInt(obj[3]) + split) - 1\n            , range = null;\n            \n          range = (start === end) ?\n            obj[0]+'.'+obj[1]+'.'+obj[2]+'.'+start :\n            obj[0]+'.'+obj[1]+'.'+obj[2]+'.'+start+'-'+(end > 255 ? 255 : end);\n\n          results.push(range);\n        }\n      });\n\n      return results;\n    },\n\n    /**\n     * @function calculate\n     * @scope private\n     * @abstract Performs calculation on subnet blocks\n     *\n     * @param {Object} opts Application defaults\n     *\n     * @returns {Array}\n     */\n    calculate: function(opts) {\n      var blocks = []\n        , results = []\n        , cidr = false\n        , tests = validation.net;\n\n      opts.range.forEach(function(host) {\n        switch (true) {\n\n          case (validation.test(tests.hostname, host) ||\n                validation.test(tests.IPv4, host) ||\n                validation.test(tests.IPv6, host)):\n\n            results.push(host);\n\n            break;\n\n          case (validation.test(tests.IPv4CIDR, host) ||\n                validation.test(tests.IPv6CIDR, host)):\n\n            cidr = new netmask(host);\n            blocks = network.range(opts, cidr);\n\n            blocks.forEach(function(block) {\n              results.push(block);\n            });\n\n            break;\n\n          case (validation.test(tests.IPv4Range, host)):\n\n            results.push(host);\n\n            break;\n          default:\n            /* Silently discard specified element as invalid */\n            break;\n        }\n      });\n\n      return results;\n    }\n  };\n\n\n  /**\n   * @method validation\n   * @scope private\n   * @abstract Validation object\n   */\n  var validation = validation || {\n\n    verErr: 'Discover method requires nodejs v0.11.2 or greater',\n\n    pathErr: 'Supplied path for nmap binary is invalid',\n\n    blockErr: 'Supplied blocksize must not exceed 128',\n\n    rangeErr: 'Range must be an array of host(s). Examples: ' +\n      '192.168.2.10 (single), 10.0.2.0/24 (CIDR), 10.0.10.5-20 (range)',\n\n    portErr: 'Port(s) must match one of the following examples: ' +\n      '512 (single) | 0-65535 (range) | 10-30,80,443,3306-10000 (multiple)',\n\n    /**\n     * @var net\n     * @abstract Object with various REGEX patterns to validate network params\n     */\n    net: {\n\n      /**\n       * @var ports\n       * @abstract Regex for matching port ranges\n       * @ref http://stackoverflow.com/a/21075138/901697\n       */\n      ports: /^(?:(?:^|[-,])(?:[1-9][0-9]{0,3}|[1-5][0-9]{4}|6(?:[0-4][0-9]{3}|5(?:[0-4][0-9]{2}|5(?:[0-2][0-9]|3[0-5])))))+$/,\n\n      /**\n       * @var hostname\n       * @abstract Regex for matching hostnames (RFC-1123)\n       */\n      hostname: /^(([a-zA-Z]|[a-zA-Z][a-zA-Z0-9\\-]*[a-zA-Z0-9])\\.)*([A-Za-z]|[A-Za-z][A-Za-z0-9\\-]*[A-Za-z0-9])|localhost$/,\n\n      /**\n       * @var IPv4\n       * @abstract Regex for matching IPv4 address types\n       */\n      IPv4: /^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])$/,\n\n      /**\n       * @var IPv4CIDR\n       * @abstract Regex for matching IPv4 CIDR notation\n       */\n      IPv4CIDR: /(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\\/([1-2]\\d|3[0-2]|\\d))/,\n\n      /**\n       * @var IPv4Range\n       * @abstract Regex for matching IPv4 Range notation\n       */\n      IPv4Range: /^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\-([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])$/,\n\n      /**\n       * @var IPv6\n       * @abstract Regex for matching IPv6 address types\n       */\n      IPv6: /^\\s*((([0-9A-Fa-f]{1,4}:){7}([0-9A-Fa-f]{1,4}|:))|(([0-9A-Fa-f]{1,4}:){6}(:[0-9A-Fa-f]{1,4}|((25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)(\\.(25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)){3})|:))|(([0-9A-Fa-f]{1,4}:){5}(((:[0-9A-Fa-f]{1,4}){1,2})|:((25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)(\\.(25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)){3})|:))|(([0-9A-Fa-f]{1,4}:){4}(((:[0-9A-Fa-f]{1,4}){1,3})|((:[0-9A-Fa-f]{1,4})?:((25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)(\\.(25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)){3}))|:))|(([0-9A-Fa-f]{1,4}:){3}(((:[0-9A-Fa-f]{1,4}){1,4})|((:[0-9A-Fa-f]{1,4}){0,2}:((25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)(\\.(25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)){3}))|:))|(([0-9A-Fa-f]{1,4}:){2}(((:[0-9A-Fa-f]{1,4}){1,5})|((:[0-9A-Fa-f]{1,4}){0,3}:((25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)(\\.(25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)){3}))|:))|(([0-9A-Fa-f]{1,4}:){1}(((:[0-9A-Fa-f]{1,4}){1,6})|((:[0-9A-Fa-f]{1,4}){0,4}:((25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)(\\.(25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)){3}))|:))|(:(((:[0-9A-Fa-f]{1,4}){1,7})|((:[0-9A-Fa-f]{1,4}){0,5}:((25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)(\\.(25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)){3}))|:)))(%.+)?\\s*/,\n\n      /**\n       * @var IPv6CIDR\n       * @abstract Regex for matching IPv6 CIDR notation\n       */\n      IPv6CIDR: /^\\s*((([0-9A-Fa-f]{1,4}:){7}([0-9A-Fa-f]{1,4}|:))|(([0-9A-Fa-f]{1,4}:){6}(:[0-9A-Fa-f]{1,4}|((25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)(\\.(25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)){3})|:))|(([0-9A-Fa-f]{1,4}:){5}(((:[0-9A-Fa-f]{1,4}){1,2})|:((25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)(\\.(25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)){3})|:))|(([0-9A-Fa-f]{1,4}:){4}(((:[0-9A-Fa-f]{1,4}){1,3})|((:[0-9A-Fa-f]{1,4})?:((25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)(\\.(25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)){3}))|:))|(([0-9A-Fa-f]{1,4}:){3}(((:[0-9A-Fa-f]{1,4}){1,4})|((:[0-9A-Fa-f]{1,4}){0,2}:((25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)(\\.(25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)){3}))|:))|(([0-9A-Fa-f]{1,4}:){2}(((:[0-9A-Fa-f]{1,4}){1,5})|((:[0-9A-Fa-f]{1,4}){0,3}:((25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)(\\.(25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)){3}))|:))|(([0-9A-Fa-f]{1,4}:){1}(((:[0-9A-Fa-f]{1,4}){1,6})|((:[0-9A-Fa-f]{1,4}){0,4}:((25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)(\\.(25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)){3}))|:))|(:(((:[0-9A-Fa-f]{1,4}){1,7})|((:[0-9A-Fa-f]{1,4}){0,5}:((25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)(\\.(25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)){3}))|:)))(%.+)?\\s*(\\/(\\d|\\d\\d|1[0-1]\\d|12[0-8]))$/,\n    },\n\n    /**\n     * @function init\n     * @scope private\n     * @abstract Construct for network/port validation\n     *\n     * @param {Object} opts - User supplied options\n     * @param {Function} cb - Callback\n     */\n    init: function(opts, cb) {\n      var scope = this\n        , errors = [];\n\n      if (!scope.exists(opts.nmap))\n           errors.push(new Error(scope.pathErr));\n\n      if (opts.blocksize > 128)\n        errors.push(new Error(scope.blockErr));\n\n      if ((!opts.range) || (!/array|object/.test(typeof(opts.range))))\n        errors.push(new Error(scope.rangeErr));\n\n      opts.range.forEach(function(value) {\n        scope.verify(value, function(err, result) {\n          if (err) errors.push(err);\n        });\n      });\n\n      if (opts.ports) {\n        if (!scope.net.ports.test(opts.ports))\n          errors.push(new Error(scope.portErr));\n      }\n\n      return (errors.length > 0) ? cb(errors) : cb(null, true);\n    },\n\n    /**\n     * @function verify\n     * @abstract Verify options provided\n     *\n     * @param {String} host User supplied configuration object\n     * @param {Function} cb - Callback\n     *\n     * @returns {Function}\n     */\n    verify: function(host, cb) {\n      if (this.test(this.net.hostname, host) ||\n          this.test(this.net.IPv4, host) ||\n          this.test(this.net.IPv6, host) ||\n          this.test(this.net.IPv4CIDR, host) ||\n          this.test(this.net.IPv6CIDR, host) ||\n          this.test(this.net.IPv4Range, host)) {\n        return cb(null, true);\n      } else {\n        return cb(new Error('Supplied host (' + host + ') ' +\n                            'did not pass validation. ' + this.rangeErr));\n      }\n    },\n\n    /**\n     * @function test\n     * @abstract Test specified regex test on string\n     *\n     * @param {Object} regex - Regex test case\n     * @param {String} str - String to perform test on\n     *\n     * @returns {Boolean}\n     */\n    test: function(regex, str) {\n      return regex.test(str);\n    },\n\n    /**\n     * @function exists\n     * @abstract Binary file tests\n     *\n     * @param {String} path - Path for file\n     *\n     * @returns {Boolean}\n     */\n    exists: function(path) {\n      return hasbin.sync(path);\n    },\n  };\n\n  /**\n   * @function discover\n   * @scope public\n   * @abstract Finds online neighbors\n   *\n   * @param {Object} obj User supplied options\n   * @param {Function} cb User supplied callback function\n   */\n  nmap.prototype.discover = function(obj, cb) {\n    cb = cb || obj;\n\n    var opts = {};\n\n    config.init(defaults, obj, function discover(err, settings) {\n      if (err)\n        return cb(err);\n\n      opts = settings.opts;\n      opts.funcs = settings.funcs;\n\n      tools.worker(opts, function scan(err, data) {\n        if (err)\n          return cb(err);\n\n        return cb(null, data);\n      });\n    });\n  };\n\n  /**\n   * @function scan\n   * @scope public\n   * @abstract Performs scan of specified host/port combination\n   *\n   * @param {Object} obj User supplied options\n   * @param {Function} cb User supplied callback function\n   */\n  nmap.prototype.scan = function(obj, cb) {\n    cb = cb || obj;\n\n    var opts = {};\n\n    config.init(defaults, obj, function discover(err, settings) {\n      if (err)\n        return cb(err);\n\n      opts = settings.opts;\n      opts.funcs = settings.funcs;\n\n      tools.worker(opts, function scan(err, data) {\n        if (err)\n          return cb(err);\n\n        return cb(null, data);\n      });\n    });\n  };\n};\n\n/* robot, do work */\nmodule.exports = new nmap();"}